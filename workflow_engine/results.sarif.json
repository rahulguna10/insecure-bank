{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Synopsys Workflow Engine Reports",
          "rules": [
            {
              "help": {
                "text": "cwe-502 : A user-controllable string is deserialized."
              },
              "id": "502",
              "shortDescription": {
                "text": "CWE-502: unsafe deserialization"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/502.html",
              "properties": {
                "category": "High impact security"
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "help": {
                "text": "cwe-79 : Untrusted user-supplied data is inserted into a context that can execute JavaScript without adequate validation, escaping, or filtering."
              },
              "id": "79",
              "shortDescription": {
                "text": "CWE-79: cross-site scripting"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/79.html",
              "properties": {
                "category": "High impact security"
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "help": {
                "text": "cwe-352 : The web application controller modifies data or state and is unprotected from cross-site request forgery."
              },
              "id": "352",
              "shortDescription": {
                "text": "CWE-352: cross-site request forgery"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/352.html",
              "properties": {
                "category": "High impact security"
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "help": {
                "text": "cwe-89 : Untrusted user-supplied data is inserted into a SQL statement without adequate validation, escaping, or filtering."
              },
              "id": "89",
              "shortDescription": {
                "text": "CWE-89: sql injection"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/89.html",
              "properties": {
                "category": "High impact security"
              },
              "defaultConfiguration": {
                "level": "error"
              }
            },
            {
              "help": {
                "text": "cwe-22 : A user-controllable string is used as part or all of a filesystem path, filename, or URI (uniform resource identifier)."
              },
              "id": "22",
              "shortDescription": {
                "text": "CWE-22: filesystem path, filename, or uri manipulation"
              },
              "helpUri": "https://cwe.mitre.org/data/definitions/22.html",
              "properties": {
                "category": "High impact security"
              },
              "defaultConfiguration": {
                "level": "error"
              }
            }
          ]
        }
      },
	  "results": [
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "143"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/controllers/DashboardController.java"
                }
              }
            }
          ],
          "message": {
            "text": "A tainted value \"file.getInputStream()\" is deserialized. This may allow an attacker to bypass security checks or execute arbitrary code."
          },
          "ruleId": "502"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "147"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/controllers/DashboardController.java"
                }
              }
            }
          ],
          "message": {
            "text": "Concatenating \"file.getOriginalFilename()\" to an HTML page allows cross-site scripting, because it was not properly sanitized for context HTML PCDATA block."
          },
          "ruleId": "79"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "65"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/controllers/TransferController.java"
                }
              }
            }
          ],
          "message": {
            "text": "\"com.example.controllers.TransferController.transfer\" is a web-app entry point that requires protection from cross-site request forgery (CSRF)."
          },
          "ruleId": "352"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "123"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/controllers/TransferController.java"
                }
              }
            }
          ],
          "message": {
            "text": "\"com.example.controllers.TransferController.transferCheck\" is a web-app entry point that requires protection from cross-site request forgery (CSRF)."
          },
          "ruleId": "352"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "40"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/dao/AccountDaoImpl.java"
                }
              }
            }
          ],
          "message": {
            "text": "Insecure concatenation of a SQL statement. The value \"username\" is tainted."
          },
          "ruleId": "89"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "20"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/dao/ActivityDaoImpl.java"
                }
              }
            }
          ],
          "message": {
            "text": "Insecure concatenation of a SQL statement. The value \"number\" is tainted."
          },
          "ruleId": "89"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "18"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/facade/StorageFacadeImpl.java"
                }
              }
            }
          ],
          "message": {
            "text": "Constructing a path or URI using the tainted value \"url + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files."
          },
          "ruleId": "22"
        },
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "region": {
                  "startLine": "24"
                },
                "artifactLocation": {
                  "uri": "src/main/java/com/example/facade/StorageFacadeImpl.java"
                }
              }
            }
          ],
          "message": {
            "text": "Constructing a path or URI using the tainted value \"url + fileName\". This may allow an attacker to access, modify, or test the existence of critical or sensitive files. Remediation: Path manipulation vulnerabilities can be addressed by proper input validation. Blacklisting characters that allow unsafe path traversal can improve the safety of the input, but the recommended approach is to whitelist the set of expected characters. This should exclude absolute paths and upward directory traversal."
          },
          "ruleId": "22"
        }
      ]
    }
  ]
}
